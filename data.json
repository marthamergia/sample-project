import React from 'react';
import './index.css';
import { useQuery } from '@apollo/client';
import { GET_CLIENTS } from './queries';

const ListingPage = () => {
  const { loading, error, data } = useQuery(GET_CLIENTS);

  if (loading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p>Error: {error.message}</p>;
  }

  const clients = data.clients;

  return (
    <div className='container'>
      <h2>Clients</h2>
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Age</th>
          </tr>
        </thead>
        <tbody>
          {clients.map((client: any) => (
            <tr key={client.id}>
              <td>{client.id}</td>
              <td>{client.name}</td>
              <td>{client.age}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ListingPage;








import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { ApolloClient } from '@apollo/client/core/ApolloClient';
import { InMemoryCache, ApolloProvider } from '@apollo/client';
const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
// root.render(
//   <React.StrictMode>
//     <App />
//   </React.StrictMode>
// );

const result = new ApolloClient({
  uri: 'http://localhost:4000/graphql', // Replace with your server's GraphQL endpoint
  cache: new InMemoryCache(),
});

root.render(
  <ApolloProvider client={result}>
    <App />
  </ApolloProvider>,
  document.getElementById('root')
);

reportWebVitals();










import React from 'react';
import ReactDOM from 'react-dom';
import { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import ListingPage from './ListingPage';
import DetailPage from './DetailPage';

const client = new ApolloClient({
  uri: 'http://localhost:4000/graphql',
  cache: new InMemoryCache(),
});

const App = () => {
  return (
    <ApolloProvider client={client}>
      <Router>
        <Routes>
          <Route path="/" element={<ListingPage />} />
          <Route path="/detail/:id" element={<DetailPage />} />
        </Routes>
      </Router>
    </ApolloProvider>
  );
};

ReactDOM.render(<App />, document.getElementById('root'));
export default App;











return (
    <div className='detail'>
      <h2>Additional Information</h2>
      <table>
        <thead>
          <tr>
            <th>Company</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Address</th>
          </tr>
        </thead>
        <tbody>
          {clients.map((clients: any) => (
            <tr key={clients.id}>
              <td>{clients.additionalinfo.company}</td>
              <td>{clients.additionalinfo.email}</td>
              <td>{clients.additionalinfo.phone}</td>
              <td>{clients.additionalinfo.address}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};










<div>
<h2>Client Details</h2>

{clients.map((client: any) => (
      <div key={client.id}>
        <p>{client.additionalinfo.company}</p>
        <p>{client.additionalinfo.email}</p>
        <p>{client.additionalinfo.phone}</p>
        <p>{client.additionalinfo.address}</p>
</div>
 ))} </div>
);
};







if (loading) {
  return <p>Loading...</p>;
}

if (error) {
  return <p>Error: {error.message}</p>;
}

const clients = data.client;


return (
    <div className='detail'>
      <h2>Additional Information</h2>
      <table>
        <thead>
          <tr>
            <th>Company</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Address</th>
          </tr>
        </thead>
        <tbody>
          {clients.map((client: any) => (
            <tr key={client.id}>
              <td>{client.additionalinfo.company}</td>
              <td>{client.additionalinfo.email}</td>
              <td>{client.additionalinfo.phone}</td>
              <td>{client.additionalinfo.address}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};





const DetailPage = () => {
  const { loading, error, data } = useQuery(GET_INFO);
  if (loading) {
    return <p>Loading...</p>;
  }
  
  if (error) {
    return <p>Error: {error.message}</p>;
  }
  
  const clients = data.additionalinfo;
  
  console.log(clients)
  console.log(data)

  return(
    <div>


    </div>
  
  )}




  <div className='container'>
  <h2>Clients</h2>
  <table>
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Age</th>
      </tr>
    </thead>
    <tbody>
      {clients.map((clients: any) => (
        <tr key={clients.id}>
          <td>{clients.id}</td>
          <td>
          <Link to={`/DetailPage/${clients.id}`}>{clients.name}</Link>
          </td>
          <td>{clients.age}</td>
        </tr>
      ))}
    </tbody>
  </table>
</div>
);









<h2>Additional Information</h2>

<table>
  <thead>
    <tr>
      <th>Company</th>
      <th>Address</th>
      <th>Email</th>
      <th>Phone</th>
    </tr>
  </thead>
  <tbody>
  {clientInfo.map((info: { id: boolean | React.Key | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | null | undefined; name: string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal | null | undefined; age: string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal | null | undefined; }) => (
      <tr key={info.id}>
        <td>{info.id}</td>
        <td>{info.name}</td>
        <td>{info.age}</td>
        
      </tr>
    ))}
  </tbody>
</table>







import React from 'react';
import { useQuery } from '@apollo/client';
import { GET_INFO } from './queries';

const DetailPage = () => {
  const { loading, error, data } = useQuery(GET_INFO);

  if (loading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p>Error: {error.message}</p>;
  }

  const additionalInfo = data.additionalinfo;

  return (
    <div className='container'>
      <h2>Additional Information</h2>

      <table>
        <thead>
          <tr>
            <th>Company</th>
            <th>Address</th>
            <th>Email</th>
            <th>Phone</th>
          </tr>
        </thead>
        <tbody>
          {additionalInfo.map((info: { id: React.Key | null | undefined; company: string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal | null | undefined; address: string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal | null | undefined; email: string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal | null | undefined; phone: string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal | null | undefined; }) => (
            <tr key={info.id}>
              <td>{info.company}</td>
              <td>{info.address}</td>
              <td>{info.email}</td>
              <td>{info.phone}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default DetailPage;
